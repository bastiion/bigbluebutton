#!/bin/bash -e

############################
### BEGIN DEB-HELPERS.SH ###
############################

#
# Adding service to autostart
# $1 = service name
#
startService() {
  app_name=$1
  if hash systemctl > /dev/null 2>&1 && [ ! -f /.dockerenv ]; then
    # if there no .service or .timer (or any other suffix), it will add .service suffix
    if [[ ! $app_name =~ ^.*\.[a-z]*$ ]]; then
      app_name="$app_name.service"
    fi
    echo "Adding $app_name to autostart using systemd"
    systemctl enable $app_name
    systemctl start $app_name
  elif hash update-rc.d > /dev/null 2>&1 && [ ! -f /.dockerenv ]; then
    echo "Adding $app_name to autostart using update-rc.d"
    update-rc.d $app_name defaults
    service $app_name start
  elif hash chkconfig > /dev/null 2>&1; then
    echo "Adding $app_name to autostart using chkconfig"
    chkconfig --add $app_name
    chkconfig $app_name on
    service $app_name start
  else
    echo "WARNING: Could not add $app_name to autostart: neither update-rc nor chkconfig found!"
  fi
}

#
# Removing service from autostart
# $1 = service name
#
stopService() {
  app_name=$1
  if hash systemctl > /dev/null 2>&1 && [ ! -f /.dockerenv ]; then
    # if there no .service or .timer (or any other suffix), it will add .service suffix
    if [[ ! $app_name =~ ^.*\.[a-z]*$ ]]; then
      app_name="$app_name.service"
    fi
    echo "Removing $app_name from autostart using systemd"
    if systemctl status $app_name | grep running > /dev/null 2>&1; then
      systemctl stop $app_name
    fi
    if systemctl is-enabled $app_name > /dev/null 2>&1; then
      systemctl disable $app_name
    fi
  elif hash update-rc.d > /dev/null 2>&1 && [ ! -f /.dockerenv ]; then
    echo "Removing $app_name from autostart using update-rc.d"
    update-rc.d -f $app_name remove
    service $app_name stop
  elif hash chkconfig > /dev/null 2>&1; then
    echo "Removing $app_name from autostart using chkconfig"
    chkconfig $app_name off
    chkconfig --del $app_name
    service $app_name stop
  else
    echo "WARNING: Could not remove $app_name from autostart: neither update-rc nor chkconfig found!"
  fi
}

#
# Reload service
# $1 = service name
#
reloadService() {
  app_name=$1
  if hash systemctl > /dev/null 2>&1 && [ ! -f /.dockerenv ]; then
  # if there no .service or .timer (or any other suffix), it will add .service suffix
    if [[ ! $app_name =~ ^.*\.[a-z]*$ ]]; then
      app_name="$app_name.service"
    fi
    echo "Reloading $app_name using systemd"
    if systemctl status $app_name > /dev/null 2>&1; then
      systemctl reload-or-restart $app_name
    else
      startService $app_name
    fi
  elif hash service > /dev/null 2>&1; then
    echo "Reloading $app_name using service"
    service $app_name reload
  else
    echo "WARNING: Could not reload $app_name: neither update-rc nor chkconfig found!"
  fi
}

#
# Restart service
# $1 = service name
#
restartService() {
  app_name=$1
  if hash systemctl > /dev/null 2>&1 && [ ! -f /.dockerenv ]; then
    # if there no .service or .timer (or any other suffix), it will add .service suffix
    if [[ ! $app_name =~ ^.*\.[a-z]*$ ]]; then
      app_name="$app_name.service"
    fi
    echo "Restart $app_name using systemd"
    if systemctl status $app_name > /dev/null 2>&1; then
      systemctl restart $app_name
    else
      startService $app_name
    fi
  elif hash service > /dev/null 2>&1; then
    echo "Restart $app_name using service"
    service $app_name restart
  else
    echo "WARNING: Could not restart $app_name: neither update-rc nor chkconfig found!"
  fi
}

#
# Adapted from SBT scripts.  See 
#  https://github.com/sbt/sbt-native-packager/blob/master/src/main/resources/com/typesafe/sbt/packager/linux/control-functions
#

# Adding system user
# $1 = user
# $2 = uid
# $3 = group
# $4 = home directory
# $5 = description
# $6 = shell (defaults to /bin/false)
addUser() {
  user="$1"
  if [ -z "$user" ]; then
    # echo "usage: addUser user [group] [description] [shell]"
    exit 1
  fi
  uid="$2"
  if [ -z "$uid" ]; then
    uid_flags=""
  else
    uid_flags="--uid $uid"
  fi
  if [ -z "$4" ]; then
    home_flags="--no-create-home"
  else
    home_flags="-d $4"
  fi
  group=${3:-$user}
  descr=${5:-No description}
  shell=${6:-/bin/false}
  if ! getent passwd | grep -q "^$user:";
  then
    # echo "Creating system user: $user in $group with $descr and shell $shell"
    useradd $uid_flags --gid $group $home_flags --system --shell $shell -c "$descr" $user
  fi
}


# Adding system group
# $1 = group
# $2 = gid
addGroup() {
  group="$1"
  gid="$2"
  if [ -z "$gid" ]; then
    gid_flags=""
  else
    gid_flags="--gid $gid"
  fi
  if ! getent group | grep -q "^$group:" ;
  then
    # echo "Creating system group: $group"
    groupadd $gid_flags --system $group
  fi
}

# Will return true even if deletion fails
# $1 = user
deleteUser() {
  if hash deluser 2>/dev/null; then
    deluser --quiet --system $1 > /dev/null || true
  elif hash userdel 2>/dev/null; then
    userdel $1
  else
    echo "WARNING: Could not delete user $1 . No suitable program (deluser, userdel) found"
  fi
}

# Will return true even if deletion fails
# $1 = group
deleteGroup() {
  if hash delgroup 2>/dev/null; then
    delgroup --quiet --system $1 > /dev/null || true
  elif hash groupdel 2>/dev/null; then
    groupdel $1
  else
    echo "WARNING: Could not delete user $1 . No suitable program (delgroup, groupdel) found"
  fi
}

get_yml_properties() {
  cat ${1} | grep : | grep -v \# | grep -v :$ | sed -e "s/ //g" -e "s/:.*/ /g" | tr -d '\n'
}

get_yml_value() {
  cat ${1} | tr -d '\r' | grep -v '#' | sed -n "/${2}[^:]*: /{s/[^:]*:[ ]*//;p}"
}

change_yml_value () {
  sed -i "s<^\([[:blank:]#]*\)\(${2}\): .*<\1\2: ${3}<" $1
}


create_keep_file() {
  SOURCE=$1
  SOURCE_ORIG=$SOURCE.orig
  TARGET="/tmp/$(basename $SOURCE).keep"
  rm -f $TARGET
  if [ -f $SOURCE ] && [ -f $SOURCE_ORIG ]; then
    VARS=$(get_yml_properties $SOURCE_ORIG)
    for v in $VARS ; do
      orig_val=$(get_yml_value $SOURCE_ORIG $v)
      val=$(get_yml_value $SOURCE $v)
      if [ "$orig_val" != "$val" ]; then
        echo "$v: $val" | tee -a $TARGET
      fi
    done
  fi
}

propagate_keep_file() {
  TARGET=$1
  SOURCE="/tmp/$(basename $TARGET).keep"
  if [ -f $SOURCE ] && [ -f $TARGET ]; then
    VARS=$(get_yml_properties $SOURCE)
    for v in $VARS ; do
      old_val=$(get_yml_value $SOURCE $v)
      change_yml_value $TARGET $v $old_val
    done
  fi
}

#if LANG=c ifconfig | grep -q 'venet0:0'; then
#        # IP detection for OpenVZ environment
#        IP=$(ifconfig | grep -v '127.0.0.1' | grep -E "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | tail -1 | cut -d: -f2 | awk '{ print $1}')
#else
#        # IP detection for et* and en* networks
#	IP=$(echo " \
#$(LANG=c ifconfig  | awk -v RS="" '{gsub (/\n[ ]*inet /," ")}1' | grep ^wl.*  | grep addr: | head -n1 | sed 's/.*addr://g' | sed 's/ .*//g')   \
#$(LANG=c ifconfig  | awk -v RS="" '{gsub (/\n[ ]*inet /," ")}1' | grep ^bo.*  | grep addr: | head -n1 | sed 's/.*addr://g' | sed 's/ .*//g')   \
#$(LANG=c ifconfig  | awk -v RS="" '{gsub (/\n[ ]*inet /," ")}1' | grep ^em.*  | grep addr: | head -n1 | sed 's/.*addr://g' | sed 's/ .*//g')   \
#$(LANG=c ifconfig  | awk -v RS="" '{gsub (/\n[ ]*inet /," ")}1' | grep ^p.p.* | grep addr: | head -n1 | sed 's/.*addr://g' | sed 's/ .*//g')   \
#$(LANG=c ifconfig  | awk -v RS="" '{gsub (/\n[ ]*inet /," ")}1' | grep ^et.*  | grep addr: | head -n1 | sed 's/.*addr://g' | sed 's/ .*//g')   \
#$(LANG=c ifconfig  | awk -v RS="" '{gsub (/\n[ ]*inet /," ")}1' | grep ^en.*  | grep addr: | head -n1 | sed 's/.*addr://g' | sed 's/ .*//g') " | head -n1 | sed 's/ //g' )
$fi

IP=$(hostname -I | sed 's/ .*//g')

if [ -z "$IP" ]; then
  if [ -f /etc/redhat-release ]; then
    IP=$(hostname -I | sed 's/ .*//g')
  fi
fi

if [ -f /var/lib/tomcat7/webapps/bigbluebutton/WEB-INF/classes/bigbluebutton.properties ]; then
  SERVER_URL=$(cat /var/lib/tomcat7/webapps/bigbluebutton/WEB-INF/classes/bigbluebutton.properties | sed -n '/^bigbluebutton.web.serverURL/{s/.*\///;p}')
fi


##########################
### END DEB-HELPERS.SH ###
##########################

escape_quotes() {
    cat <<EOF | sed -e "s/'/\\\\'/g"
$1
EOF
}

if id tomcat7 > /dev/null 2>&1; then
   TOMCAT_USER=tomcat7
   DEPLOY_DIR=/var/lib/tomcat7/webapps
elif id tomcat > /dev/null 2>&1; then
   TOMCAT_USER=tomcat
   DEPLOY_DIR=/var/lib/tomcat/webapps
fi

bbb_new_properties() {
	#
	# Setup bigbluebutton.properties for bbb-web
	#
        sed -i "s/bigbluebutton.web.serverURL=http:\/\/.*/bigbluebutton.web.serverURL=http:\/\/$IP/g" \
                /tmp/bigbluebutton/WEB-INF/classes/bigbluebutton.properties

        sed -i "s/screenshareRtmpServer=.*/screenshareRtmpServer=$IP/g" \
                /tmp/bigbluebutton/WEB-INF/classes/bigbluebutton.properties
}

bbb_config() {
        #
        # At this point. /var/tmp/bigbluebutton.war holds the newer version of BigBlueButton-web
        # but it's not deployed yet
        #

        DEPLOY_DIR=/var/lib/tomcat7/webapps

        rm -rf /tmp/bigbluebutton
        unzip /var/tmp/bigbluebutton.war -d /tmp/bigbluebutton > /dev/null

        if [ -f $DEPLOY_DIR/bigbluebutton/WEB-INF/classes/bigbluebutton.properties ]; then
		 if grep http:\/\/localhost $DEPLOY_DIR/bigbluebutton/WEB-INF/classes/bigbluebutton.properties; then
			bbb_new_properties
		else
        		# echo "Restoring previous /var/lib/tomcat7/webapps/bigbluebutton/WEB-INF/classes/bigbluebutton.properties"

	                VARS=$(cat $DEPLOY_DIR/bigbluebutton/WEB-INF/classes/bigbluebutton.properties | grep = | grep -v \# | sed -e "s/ //g" -e "s/=.*/ /g" | tr -d '\n')
			for v in $VARS ; do
				old_val=$(cat $DEPLOY_DIR/bigbluebutton/WEB-INF/classes/bigbluebutton.properties | tr -d '\r' | sed -n "/^${v}[# ]*=[ ]*/{s/${v}[ ]*=[ ]*//;p}" )
				sed -i "s|^$v=.*|$v=$old_val|" /tmp/bigbluebutton/WEB-INF/classes/bigbluebutton.properties
			done
		fi
        else
                bbb_new_properties
        fi

	
        #
        # Now update the API examples
	#
	HASH="$RANDOM$(date +%s)$$$RANDOM"
	SALT=$(echo $HASH | md5sum | md5sum | sed 's/  -//')

	HOST=$(cat /tmp/bigbluebutton/WEB-INF/classes/bigbluebutton.properties | sed -n '/^bigbluebutton.web.serverURL/{s/.*\///;p}')

	if [ -f $DEPLOY_DIR/bigbluebutton/WEB-INF/classes/bigbluebutton.properties ]; then
		if grep -q securitySalt $DEPLOY_DIR/bigbluebutton/WEB-INF/classes/bigbluebutton.properties; then 
			# echo "#Using existing salt in bigbluebutton.properties"
			SALT=$(cat $DEPLOY_DIR/bigbluebutton/WEB-INF/classes/bigbluebutton.properties | tr -d '\r' | sed -n '/securitySalt/{s/.*=//;p}')
		fi
	fi

        sed -i "s/securitySalt=.*/securitySalt=$SALT/g" \
               	/tmp/bigbluebutton/WEB-INF/classes/bigbluebutton.properties	

	# XXX
	sed -i "s/^swfToolsDir=\/bin$/swfToolsDir=\/usr\/bin/g" \
		/tmp/bigbluebutton/WEB-INF/classes/bigbluebutton.properties


	# We're ready to deploy bigbluebutton.war in tomcat7
	#

#	if [ -f /etc/redhat-release ]; then
#		systemctl stop $TOMCAT_USER
#        else
#		/etc/init.d/$TOMCAT_USER stop
#	fi
	#systemctl stop $TOMCAT_USER

	# Set the appropriate permissions in the /var/log/bigbluebutton
	#
#	chown -R $TOMCAT_USER:$TOMCAT_USER /var/bigbluebutton/configs
#	chown $TOMCAT_USER:$TOMCAT_USER /var/bigbluebutton
#	chown -R $TOMCAT_USER:$TOMCAT_USER /var/log/bigbluebutton
#	
#	chmod 755 /var/log/bigbluebutton

	#
	# XXX
#	if id meteor > /dev/null 2>&1 ; then
#		if [ -d /var/log/bigbluebutton/html5 ]; then
#			chown -R meteor:meteor /var/log/bigbluebutton/html5
#		fi
#	fi

	cd /tmp/bigbluebutton

	#
	# Update the placementsThreshold and imageTagThreshold
	sed -i 's/placementsThreshold=8000/placementsThreshold=800/g' /tmp/bigbluebutton/WEB-INF/classes/bigbluebutton.properties
	sed -i 's/imageTagThreshold=8000/imageTagThreshold=800/g' /tmp/bigbluebutton/WEB-INF/classes/bigbluebutton.properties

	#
	# Update the API version to 2.0
	sed -i 's/apiVersion=1.1/apiVersion=2.0/g' /tmp/bigbluebutton/WEB-INF/classes/bigbluebutton.properties

	zip -r bigbluebutton * > /dev/null

	chown $TOMCAT_USER:$TOMCAT_USER bigbluebutton.zip

	mv -f bigbluebutton.zip $DEPLOY_DIR/bigbluebutton.war
	rm -rf $DEPLOY_DIR/bigbluebutton

	#
	# Give bbb-web an empty properties file
	#
	mkdir -p /usr/share/tomcat7/.grails
	touch /usr/share/tomcat7/.grails/bigbluebutton-config.properties

	# Create directory for Java heap dumps
	#
	if [ -f /var/bigbluebutton/diagnostics ]; then
		rm /var/bigbluebutton/diagnostics
	fi
	mkdir -p /var/bigbluebutton/diagnostics
	chown $TOMCAT_USER:$TOMCAT_USER /var/bigbluebutton/diagnostics

        #
        # Restart tomcat7and deploy the new version
        #
        #/etc/init.d/$TOMCAT_USER start

}

case "$1" in
    configure|upgrade|1|2)
	bbb_config
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)

    ;;

    *)
        echo "## postinst called with unknown argument \`$1'" >&2
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.



exit 0


